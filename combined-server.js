require('dotenv').config();
const http = require('http');
const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const cron = require('node-cron');
const { exec } = require('child_process');

const PORT = process.env.PORT || 3000;

// ‡∏≠‡πà‡∏≤‡∏ô cron schedule ‡∏à‡∏≤‡∏Å .env
const cronSchedule = process.env.CRON_SCHEDULE || '0 0 * * *'; // ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î cookies ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö backup ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô + persistent storage
function loadCookiesFromFile() {
  const cookiesPath = path.join(__dirname, 'cookies.txt');
  const backupPath = path.join(__dirname, 'cookies.backup.txt');
  const emergencyBackupPath = path.join(__dirname, 'cookies.emergency.txt');
  const persistentPath = path.join(__dirname, 'cookies.persistent.txt');
  
  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡πÄ‡∏û‡∏¥‡πà‡∏° persistent)
  const cookieFiles = [cookiesPath, backupPath, emergencyBackupPath, persistentPath];
  
  try {
    for (let i = 0; i < cookieFiles.length; i++) {
      const filePath = cookieFiles[i];
      
      if (fs.existsSync(filePath)) {
        const cookieString = fs.readFileSync(filePath, 'utf8').trim();
        if (cookieString && cookieString.length > 50) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cookies ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
          const fileType = i === 0 ? '‡∏´‡∏•‡∏±‡∏Å' : i === 1 ? 'backup' : i === 2 ? 'emergency backup' : 'persistent';
          console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î cookies ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå${fileType}`);
          
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å ‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
          if (i > 0) {
            fs.writeFileSync(cookiesPath, cookieString);
            console.log('üîÑ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å cookies ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å');
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó persistent file ‡∏î‡πâ‡∏ß‡∏¢
            fs.writeFileSync(persistentPath, cookieString);
            console.log('üíæ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó persistent cookies');
          }
          
          return cookieString;
        }
      }
    }
    
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö cookies ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏î‡πÜ');
    return '';
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î cookies:', error.message);
    return '';
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á cookies ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô + persistent storage
function backupCookies() {
  try {
    const cookiesPath = path.join(__dirname, 'cookies.txt');
    const backupPath = path.join(__dirname, 'cookies.backup.txt');
    const emergencyBackupPath = path.join(__dirname, 'cookies.emergency.txt');
    const persistentPath = path.join(__dirname, 'cookies.persistent.txt');
    const timestampBackupPath = path.join(__dirname, `cookies.${Date.now()}.txt`);
    
    if (fs.existsSync(cookiesPath)) {
      const cookieString = fs.readFileSync(cookiesPath, 'utf8').trim();
      if (cookieString && cookieString.length > 50) {
        // ‡∏™‡∏≥‡∏£‡∏≠‡∏á backup ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô emergency backup
        if (fs.existsSync(backupPath)) {
          const currentBackup = fs.readFileSync(backupPath, 'utf8').trim();
          if (currentBackup) {
            fs.writeFileSync(emergencyBackupPath, currentBackup);
          }
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á backup ‡πÉ‡∏´‡∏°‡πà
        fs.writeFileSync(backupPath, cookieString);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á persistent backup (‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
        fs.writeFileSync(persistentPath, cookieString);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamped backup (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ 5 ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
        fs.writeFileSync(timestampBackupPath, cookieString);
        cleanupOldBackups();
        
        console.log('üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á cookies ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô + persistent ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
      }
    }
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á cookies:', error.message);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö backup ‡πÄ‡∏Å‡πà‡∏≤
function cleanupOldBackups() {
  try {
    const files = fs.readdirSync(__dirname)
      .filter(file => file.match(/^cookies\.\d+\.txt$/))
      .map(file => ({
        name: file,
        time: parseInt(file.match(/cookies\.(\d+)\.txt/)[1])
      }))
      .sort((a, b) => b.time - a.time);
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏Ñ‡πà 5 ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 3 ‡πÄ‡∏õ‡πá‡∏ô 5)
    if (files.length > 5) {
      files.slice(5).forEach(file => {
        fs.unlinkSync(path.join(__dirname, file.name));
      });
      console.log(`üßπ ‡∏•‡∏ö backup ‡πÄ‡∏Å‡πà‡∏≤ ${files.length - 5} ‡πÑ‡∏ü‡∏•‡πå`);
    }
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö backup ‡πÄ‡∏Å‡πà‡∏≤:', error.message);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Lazada API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö auto-refresh cookies
async function callLazadaAdsenseApi(jumpUrl, subIdTemplateKey = '') {
  const url = 'https://adsense.lazada.co.th/newOffer/link-convert.json';
  let cookieString = loadCookiesFromFile();
  
  if (!cookieString) {
    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö cookies - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô getcookiesLazada.js ‡∏Å‡πà‡∏≠‡∏ô');
  }
  
  const headers = {
    'accept': 'application/json, text/plain, */*',
    'accept-language': 'en-US,en;q=0.9,th;q=0.8,zh-CN;q=0.7,zh;q=0.6',
    'bx-v': '2.5.31',
    'content-type': 'application/json',
    'cookie': cookieString,
    'origin': 'https://adsense.lazada.co.th',
    'priority': 'u=1, i',
    'referer': 'https://adsense.lazada.co.th/index.htm',
    'sec-ch-ua': '"Chromium";v="134", "Not:A-Brand";v="24", "Opera";v="119"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"macOS"',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 OPR/119.0.0.0'
  };

  const requestBody = {
    jumpUrl: jumpUrl,
    subIdTemplateKey: subIdTemplateKey
  };

  const response = await fetch(url, {
    method: 'POST',
    headers: headers,
    body: JSON.stringify(requestBody)
  });

  const responseText = await response.text();
  return JSON.parse(responseText);
}

// ‡∏ï‡∏±‡πâ‡∏á Cron ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á cookies
console.log('üïê Cookie Scheduler ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...');
console.log(`üìÖ Cron Schedule: ${cronSchedule}`);
console.log('‚è∞ ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (Asia/Bangkok)');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables
if (!process.env.EMAIL || !process.env.PASSWORD) {
  console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö EMAIL ‡∏´‡∏£‡∏∑‡∏≠ PASSWORD ‡πÉ‡∏ô environment variables');
  console.log('üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ EMAIL ‡πÅ‡∏•‡∏∞ PASSWORD ‡πÉ‡∏ô CapRover App Configs');
}

cron.schedule(cronSchedule, () => {
  const now = new Date();
  console.log(`\n‚è∞ [${now.toISOString()}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á cookies ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...`);
  
  exec('node getcookiesLazada.js', (error, stdout, stderr) => {
    if (error) {
      console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`);
      return;
    }
    
    if (stderr) {
      console.error(`‚ö†Ô∏è Warning: ${stderr}`);
    }
    
    console.log(`‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:\n${stdout}`);
    console.log(`üéâ [${new Date().toISOString()}] ‡∏î‡∏∂‡∏á cookies ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!`);
    
    // ‡∏™‡∏≥‡∏£‡∏≠‡∏á cookies ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏î‡∏∂‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
    setTimeout(() => {
      backupCookies();
    }, 2000);
  });
}, {
  timezone: "Asia/Bangkok"
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á cookies
function validateCookies(cookieString) {
  if (!cookieString || cookieString.length < 50) {
    return false;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ cookies ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const requiredCookies = ['_tb_token_', 'lzd_cid', 'lzd_sid'];
  const hasRequiredCookies = requiredCookies.some(cookie => 
    cookieString.includes(cookie)
  );
  
  return hasRequiredCookies;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô cookies ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
function initializeCookies() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cookies ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...');
  
  const initialCookies = loadCookiesFromFile();
  if (!initialCookies || !validateCookies(initialCookies)) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö cookies ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ - ‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ');
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ cookies ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (process.env.EMAIL && process.env.PASSWORD) {
      console.log('üöÄ ‡∏£‡∏±‡∏ô‡∏î‡∏∂‡∏á cookies ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö cookies ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ...');
      exec('node getcookiesLazada.js', (error, stdout, stderr) => {
        if (error) {
          console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á cookies: ${error}`);
          return;
        }
        console.log(`‚úÖ ‡∏î‡∏∂‡∏á cookies ‡πÄ‡∏™‡∏£‡πá‡∏à:\n${stdout}`);
        setTimeout(() => {
          backupCookies();
        }, 2000);
      });
    } else {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á cookies ‡πÑ‡∏î‡πâ - ‡πÑ‡∏°‡πà‡∏û‡∏ö EMAIL ‡∏´‡∏£‡∏∑‡∏≠ PASSWORD');
    }
  } else {
    console.log('‚úÖ ‡∏û‡∏ö cookies ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    console.log(`üìä ‡∏Ç‡∏ô‡∏≤‡∏î cookies: ${initialCookies.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`);
    
    // ‡∏™‡∏≥‡∏£‡∏≠‡∏á cookies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    backupCookies();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á cookies (‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÉ‡∏´‡πâ refresh)
    const cookiesPath = path.join(__dirname, 'cookies.txt');
    if (fs.existsSync(cookiesPath)) {
      const stats = fs.statSync(cookiesPath);
      const hoursOld = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60);
      
      if (hoursOld > 12) {
        console.log(`‚è∞ Cookies ‡πÄ‡∏Å‡πà‡∏≤ ${hoursOld.toFixed(1)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡∏à‡∏∞ refresh ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ`);
      } else {
        console.log(`üïê Cookies ‡∏¢‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà (${hoursOld.toFixed(1)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)`);
      }
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cookies ‡πÅ‡∏ö‡∏ö periodic
function startCookieHealthCheck() {
  setInterval(() => {
    const cookies = loadCookiesFromFile();
    if (!cookies || !validateCookies(cookies)) {
      console.log('‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö cookies ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° refresh');
      
      if (process.env.EMAIL && process.env.PASSWORD) {
        exec('node getcookiesLazada.js', (error, stdout, stderr) => {
          if (error) {
            console.error(`‚ùå Auto-refresh cookies ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error}`);
            return;
          }
          console.log(`‚úÖ Auto-refresh cookies ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
          setTimeout(() => {
            backupCookies();
          }, 2000);
        });
      }
    }
  }, 30 * 60 * 1000); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cookies ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
initializeCookies();

// ‡πÄ‡∏£‡∏¥‡πà‡∏° health check
startCookieHealthCheck();

// ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
if (process.env.RUN_ON_START === 'true') {
  console.log('üöÄ ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ...');
  exec('node getcookiesLazada.js', (error, stdout, stderr) => {
    if (error) {
      console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`);
      return;
    }
    console.log(`‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à:\n${stdout}`);
    // ‡∏™‡∏≥‡∏£‡∏≠‡∏á cookies ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏î‡∏∂‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
    setTimeout(() => {
      backupCookies();
    }, 2000);
  });
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP Server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
const server = http.createServer(async (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  const url = new URL(req.url, `http://localhost:${PORT}`);
  
  if (req.method === 'GET' && url.pathname === '/api/v1') {
    // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á link
    try {
      const jumpUrl = url.searchParams.get('link');
      const subIdTemplateKey = url.searchParams.get('subId') || '';
      
      if (!jumpUrl) {
        res.writeHead(400, { 'Content-Type': 'application/json; charset=utf-8' });
        res.end(JSON.stringify({ 
          success: false, 
          error: 'link parameter is required',
          example: '/api/v1?link=https://pages.lazada.co.th/...'
        }));
        return;
      }
      
      console.log(`üîó [${new Date().toISOString()}] ‡πÅ‡∏õ‡∏•‡∏á link: ${jumpUrl}`);
      
      const result = await callLazadaAdsenseApi(jumpUrl, subIdTemplateKey);
      
      res.writeHead(200, { 'Content-Type': 'application/json; charset=utf-8' });
      res.end(JSON.stringify({
        success: true,
        data: result,
        originalUrl: jumpUrl,
        timestamp: new Date().toISOString()
      }));
      
    } catch (error) {
      console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
      res.writeHead(500, { 'Content-Type': 'application/json; charset=utf-8' });
      res.end(JSON.stringify({ 
        success: false, 
        error: error.message,
        timestamp: new Date().toISOString()
      }));
    }
    
  } else if (req.method === 'GET' && url.pathname === '/api/v1/cookies/status') {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ cookies
    try {
      const cookies = loadCookiesFromFile();
      const isValid = validateCookies(cookies);
      
      let cookieAge = 'unknown';
      const cookiesPath = path.join(__dirname, 'cookies.txt');
      if (fs.existsSync(cookiesPath)) {
        const stats = fs.statSync(cookiesPath);
        const hoursOld = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60);
        cookieAge = `${hoursOld.toFixed(1)} hours`;
      }
      
      res.writeHead(200, { 'Content-Type': 'application/json; charset=utf-8' });
      res.end(JSON.stringify({
        success: true,
        cookiesValid: isValid,
        cookiesLength: cookies ? cookies.length : 0,
        cookieAge: cookieAge,
        backupFiles: {
          main: fs.existsSync(path.join(__dirname, 'cookies.txt')),
          backup: fs.existsSync(path.join(__dirname, 'cookies.backup.txt')),
          emergency: fs.existsSync(path.join(__dirname, 'cookies.emergency.txt')),
          persistent: fs.existsSync(path.join(__dirname, 'cookies.persistent.txt'))
        },
        timestamp: new Date().toISOString()
      }));
    } catch (error) {
      res.writeHead(500, { 'Content-Type': 'application/json; charset=utf-8' });
      res.end(JSON.stringify({ 
        success: false, 
        error: error.message 
      }));
    }
    
  } else if (req.method === 'POST' && url.pathname === '/api/v1/cookies/refresh') {
    // Force refresh cookies
    try {
      if (!process.env.EMAIL || !process.env.PASSWORD) {
        res.writeHead(400, { 'Content-Type': 'application/json; charset=utf-8' });
        res.end(JSON.stringify({ 
          success: false, 
          error: 'EMAIL ‡πÅ‡∏•‡∏∞ PASSWORD ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô environment variables' 
        }));
        return;
      }
      
      console.log('üîÑ Force refresh cookies ‡∏ú‡πà‡∏≤‡∏ô API...');
      
      exec('node getcookiesLazada.js', (error, stdout, stderr) => {
        if (error) {
          console.error(`‚ùå Force refresh ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error}`);
          return;
        }
        console.log(`‚úÖ Force refresh ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:\n${stdout}`);
        setTimeout(() => {
          backupCookies();
        }, 2000);
      });
      
      res.writeHead(200, { 'Content-Type': 'application/json; charset=utf-8' });
      res.end(JSON.stringify({
        success: true,
        message: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ refresh cookies ‡πÅ‡∏•‡πâ‡∏ß',
        timestamp: new Date().toISOString()
      }));
      
    } catch (error) {
      res.writeHead(500, { 'Content-Type': 'application/json; charset=utf-8' });
      res.end(JSON.stringify({ 
        success: false, 
        error: error.message 
      }));
    }
    
  } else if (req.method === 'GET' && (url.pathname === '/api/v1/health' || url.pathname === '/health' || url.pathname === '/')) {
    // Health check (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á /health ‡πÅ‡∏•‡∏∞ /api/v1/health)
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('OK');
    
  } else {
    // 404
    res.writeHead(404, { 'Content-Type': 'application/json; charset=utf-8' });
    res.end(JSON.stringify({ 
      success: false,
      error: 'Endpoint not found' 
    }));
  }
});

// Handle process signals
process.on('SIGTERM', () => {
  console.log('üì¥ Received SIGTERM, shutting down gracefully...');
  server.close(() => {
    console.log('‚úÖ Server closed');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('üì¥ Received SIGINT, shutting down gracefully...');
  server.close(() => {
    console.log('‚úÖ Server closed');
    process.exit(0);
  });
});

server.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Combined Server ‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà http://0.0.0.0:${PORT}`);
  console.log(`üì° API: GET /api/v1?link=[URL]`);
  console.log(`‚ù§Ô∏è Health: GET /api/v1/health`);
  console.log(`üç™ Cookie Status: GET /api/v1/cookies/status`);
  console.log(`üîÑ Force Refresh: POST /api/v1/cookies/refresh`);
  console.log(`üç™ Cookies ‡∏à‡∏∞ refresh ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° schedule + health check ‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ`);
  console.log('‚úÖ Scheduler + API + Auto-Recovery ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
});